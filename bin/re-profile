#!/usr/bin/python

import re
import sys
import time

class RegExpResult(object):
    def __init__(self):
        self.cumulative_time = 0
        self.successful_matches = {}

if len(sys.argv) < 2:
    print 'Usage:', sys.argv[0], 'regexp1 [regexp2 regexp3 ...]'
    sys.exit(1)

patterns = [re.compile(x) for x in sys.argv[1:]]

results = {}
for pattern in patterns:
    results[pattern] = RegExpResult()

line_count = 0
for line in sys.stdin:
    line_count += 1

    for pattern in patterns:
        before = time.time()
        match = pattern.search(line)
        after = time.time()

        result = results[pattern]
        result.cumulative_time += after - before
        if match:
            result.successful_matches[line_count] = match.groups()

print 'Pattern   calls   cumulative   avgpercall  matches [line numbers]'  
pattern_count = 0
for pattern in patterns:
    pattern_count += 1
    result = results[pattern]

    print '%7d %7d   %10.6f   %10.6f  %7d' % ( \
        pattern_count,
        line_count,
        result.cumulative_time,
        result.cumulative_time / line_count,
        len(result.successful_matches)
        ),
        
    line_number_keys = result.successful_matches.keys()
    line_number_keys.sort()
    print line_number_keys
